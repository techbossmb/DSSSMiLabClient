/*
 * Screen.java
 *
 * Created on November 10, 2008, 6:10 PM
 */
package ui;

import java.awt.Color;
import java.awt.Graphics;
import java.util.List;

/**
 *
 * @author  Adedayo Omitayo adedayo.omitayo@gmail.com
 */
public class Screen extends javax.swing.JPanel {

    private List<Double> channel1Data,  channel2Data;
    private int channel1VoltsPerDivision = 1,  channel2VoltsPerDivision = 1;
    private int numScreenVoltDivisions = 10;
    private int numScreenTimeDivisions = 10;

    /** Creates new form Screen */
    public Screen() {
        initComponents();
    }

    public List<Double> getChannel1Data() {
        return channel1Data;
    }

    public void setChannel1Data(List<Double> channel1Data) {
        this.channel1Data = channel1Data;
    }

    public List<Double> getChannel2Data() {
        return channel2Data;
    }

    public void setChannel2Data(List<Double> channel2Data) {
        this.channel2Data = channel2Data;
    }

    public int getChannel1VoltsPerDivision() {
        return channel1VoltsPerDivision;
    }

    public void setChannel1VoltsPerDivision(int channel1VoltsPerDivision) {
        this.channel1VoltsPerDivision = channel1VoltsPerDivision;
        if (this.isVisible()) {
            this.repaint();
        }
    }

    public int getChannel2VoltsPerDivision() {
        return channel2VoltsPerDivision;
    }

    public void setChannel2VoltsPerDivision(int channel2VoltsPerDivision) {
        this.channel2VoltsPerDivision = channel2VoltsPerDivision;
        if (this.isVisible()) {
            this.repaint();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        setBackground(java.awt.Color.black);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        double rHeight, rWidth;
        int maxX, maxY, centerY;
        double pixelWidth, pixelHeight;

        maxX = this.getWidth() - 1;
        maxY = this.getHeight() - 1;
        centerY = maxY / 2;

        //draw the grid and X axis
        g.setColor(Color.RED);
        g.drawLine(0, centerY, maxX, centerY);
        int divWidth = maxX / numScreenVoltDivisions;
        int divHeight = maxY / numScreenTimeDivisions;
        g.setColor(Color.GRAY);
        int gridIndex = 0;
        for (; gridIndex < numScreenVoltDivisions; gridIndex++) {
            //draw horizontal line
            g.drawLine(0, gridIndex * divHeight, maxX, gridIndex * divHeight);
        }
        for (gridIndex = 0; gridIndex < numScreenTimeDivisions; gridIndex++) {
            //draw vertical line
            g.drawLine(gridIndex * divWidth, 0, gridIndex * divWidth, maxY);
        }
        //draw channel 1
        if(this.channel1Data == null) return;
        rWidth = this.channel1Data.size();
        rHeight = this.numScreenVoltDivisions * this.channel1VoltsPerDivision;
        pixelHeight = rHeight/maxY;
        pixelWidth = rWidth/maxX;
        int[] xCoord = this.calcXDeviceCoord(this.channel1Data.size(), pixelWidth);
        int[] yCoord = this.calcYDeviceCoord(this.channel1Data.toArray(new Double[0]), centerY, pixelHeight);
        g.setColor(Color.GREEN);
        for (int pointIndex = 1; pointIndex < xCoord.length; pointIndex++) {
            g.drawLine(xCoord[pointIndex - 1], yCoord[pointIndex - 1], xCoord[pointIndex], yCoord[pointIndex]);
        }
        //draw channel 2
        if(this.channel2Data == null) return;
        rWidth = this.channel2Data.size();
        rHeight = this.numScreenVoltDivisions * this.channel2VoltsPerDivision;
        pixelHeight = rHeight/maxY;
        pixelWidth = rWidth/maxX;
        xCoord = this.calcXDeviceCoord(this.channel2Data.size(), pixelWidth);
        yCoord = this.calcYDeviceCoord(this.channel2Data.toArray(new Double[0]), centerY, pixelHeight);
        g.setColor(Color.orange);
        for (int pointIndex = 1; pointIndex < xCoord.length; pointIndex++) {
            g.drawLine(xCoord[pointIndex - 1], yCoord[pointIndex - 1], xCoord[pointIndex], yCoord[pointIndex]);
        }
    }

    private int[] calcYDeviceCoord(Double[] logicalCoordinates, double centerY, double pixelHeight) {
        int[] coordinates = new int[logicalCoordinates.length];
        for (int index = 0; index < logicalCoordinates.length; index++) {
            coordinates[index] = getDeviceY(logicalCoordinates[index], centerY, pixelHeight);
        //System.out.println("y " + logicalCoordinates[index] + " " + coordinates[index]);
        }
        return coordinates;
    }

    private int[] calcXDeviceCoord(int points, double pixelWidth) {
        int[] coordinates = new int[points];
        for (int index = 0; index < points; index++) {
            coordinates[index] = getDeviceX(index, pixelWidth);
        //System.out.println("X " + index + " " + coordinates[index]);
        }
        return coordinates;
    }

    private int getDeviceX(double logicalX, double pixelWidth) {
        return (int) Math.round(logicalX / pixelWidth);
    }

    private int getDeviceY(double logicalY, double centerY, double pixelHeight) {
        return (int) Math.round(centerY - (logicalY / pixelHeight));
    }
    // Variables declaration - do not modify
    // End of variables declaration
}
